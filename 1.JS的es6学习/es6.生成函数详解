<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    异步编程的函数传递
    function * gen(arg){
        console.log(arg);
        let one = yield 111;
        console.log(one);
        let two = yield 222;
        console.log(two);
        let three = yield 333;
        console.log(three);
    }

    //执行获取迭代器对象
    let iterator = gen('不吃饭');
    传入实参,通过next方法可以返回和调用实参
    console.log(iterator.next());
    //next方法可以传入实参
    console.log(iterator.next('不减肥'));
    会返回yield的整体结果
    console.log(iterator.next('不走路'));
    console.log(iterator.next('就爱吃'));
    
    下面演示一个不咋地的例子
    在控制台中1s输出111 2s 输出222 3s输出333
    / setTimeout(() => {
        //     console.log(111);
        //     setTimeout(() => {
        //         console.log(222);
        //         setTimeout(() => {
        //             console.log(333);
        //         }, 3000);
        //     }, 2000);
        // }, 1000);
       通过嵌套回调 虽然写起来输入看起来也舒服,但是,如果你要写很长的函数,这种不停回调的函数搞不好就出了bug,而且及其繁琐,

       function one(){
        setTimeout(()=>{
            console.log(111);
            iterator.next(); next方法执行下一个
        },1000)
    }

    function two(){
        setTimeout(()=>{
            console.log(222);
            iterator.next();
        },2000)
    }

    function three(){
        setTimeout(()=>{
            console.log(333);
            iterator.next();
        },3000)
    }

    function * gen(){
        yield one();
        yield two();
        yield three();
    }
    通过函数生成器调用
    //调用生成器函数
    let iterator = gen();
    iterator.next();
    不指定 iterator.next() 函数就不会在推进,解决了无限回调,就避免了很多出bug的机会
    把函数分割成很多小块就能很好的避免了嵌套函数易出错的问题
</body>
</html>