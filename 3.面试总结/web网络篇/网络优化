前端需要注意哪些SEO :
1. 合理的 title 、 description 、 keywords ：搜索对着三项的权重逐个减小， title 值 强调重点即可，
重要关键词出现不要超过2次，而且要靠前，不同页面 title 要有所不 同； description 把页面内容高度概括，长度合适，不可过分堆砌关键词，
不同页面 description 有所不同； keywords 列举出重要关键词即可
2. 语义化的 HTML 代码，符合W3C规范：语义化代码让搜索引擎容易理解网页 
3. 重要内容 HTML 代码放在前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓 取长度有限制，保证重要内容一定会被抓取
4. 重要内容不要用 js 输出：爬虫不会执行js获取内容
5. 少用 iframe ：搜索引擎不会抓取 iframe 中的内容 
6. 非装饰性图片必须加 alt 
7. 提高网站速度：网站速度是搜索引擎排序的一个重要指标

以上其实回答出来两三条就可以了而且这种都是工作需要注意的内容，不必需要死记硬背

2. HTTP的几种请求方法用途 GET 方法
发送一个请求来取得服务器上的某一资源
POST 方法
向 URL 指定的资源提交数据或附加新的数据
PUT 方法
跟 POST 方法很像，也是想服务器提交数据。但是，它们之间有不同。 PUT 指定了资源 在服务器上的位置，而 POST 没有
HEAD 方法
只请求页面的首部
DELETE 方法
删除服务器上的某资源
OPTIONS 方法
它用于获取当前 URL 所支持的方法。如果请求成功，会有一个 Allow 的头包含类 似 “GET,POST” 这样的信息
TRACE 方法
TRACE 方法被用于激发一个远程的，应用层的请求消息回路
CONNECT 方法
把请求连接转换到透明的 TCP/IP 通道

务必熟记，面试通常会考这个是基础知识，少不掉的

3.  从浏览器地址栏输入url到显示页面的步骤 基础版本
浏览器根据请求的 URL 交给 DNS 域名解析，找到真实 IP ，向服务器发起请求；
 服务器交给后台处理完成后返回数据，浏览器接收文件（ HTML、JS、CSS 、图象等）；
浏览器对加载到的资源（ HTML、JS、CSS 等）进行语法解析，建立相应的内部数据结构 （如 HTML 的 DOM ）；
 载入解析到的资源文件，渲染页面，完成。

4. 5 如何进行网站性能优化 content 方面
减少 HTTP 请求：合并文件、 CSS 精灵、 inline Image 减少 DNS 查询： DNS 缓存、将资源分布到恰当数量的主机名 减少 DOM 元素数量
Server 方面
使用 CDN 配置 ETag 对组件使用 Gzip 压缩
Cookie 方面
减小 cookie 大小
css 方面
将样式表放到页面顶部 不使用 CSS 表达式 使用 <link> 不使用 @import
Javascript 方面
将脚本放到页面底部 将 javascript 和 css 从外部引入 压缩 javascript 和 css 删除不需要的脚本 减少 DOM 访问
图片方面
优化图片：根据实际颜色需要选择色深、压缩 优化 css 精灵 不要在 HTML 中拉伸图片

这个还是了解一下，不过方法很多以上也许不是最优的但最好记一下

5. 6 HTTP状态码及其含义 1XX ：信息状态码 100 Continue 继续，
一般在发送 post 请求时，已发送了 http header 之后服务端将 返回此信息，表示确认，之后发送具体参数信息 
2XX ：成功状态码 200 OK 正常返回信息 201 Created 请求成功并且服务器创建了新的资源 202 Accepted 服务器已接受请求，但尚未处理 
3XX ：重定向 301 Moved Permanently 请求的网页已永久移动到新位置。 302 Found 临时性重定向。 
303 See Other 临时性重定向，且总是使用 GET 请求新的 URI 。 304 Not Modified 自从上次请求后，请求的网页未修改过。 
4XX ：客户端错误 400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内 容发起请求。 
401 Unauthorized 请求未授权。 403 Forbidden 禁止访问。
404 Not Found 找不到如何与 URI 相匹配的资源。 
5XX: 服务器错误 500 Internal Server Error 常见的服务器端错误。 
503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。

极其难记，我的建议是你可以从知乎之类的网站然后每天看五分钟，太枯燥了

6. 在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页 开始，一次js请求一般情况下有哪些地方会有缓存处理？

   dns 缓存， cdn 缓存，浏览器缓存，服务器缓存

7. 一个页面上有大量的图片（大型电商网站），加载很慢，你有哪 些方法优化这些图片的加载，给用户更好的体验。

  图片懒加载，在页面上的未可视区域可以添加一个滚动事件，判断图片位置与浏览器顶端 的距离与页面的距离，如果前者小于后者，优先加载。
  如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优 先下载。
  如果图片为css图片，可以使用 CSSsprite ， SVGsprite ， Iconfont 、 Base64 等技 术。 
  如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略 图，以提高用户体验。 
  如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压 缩，图片压缩后大小与展示一致。
  （需要亲自体会，里面的都是晦涩难懂不要死记硬背，稍微理解一下就可以了）

  8. HTTP request报文结构是怎样的

   1. 首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF 
   2. 首行之后是若干行请求头，包括general-header，request-header或者entity-header，每 个一行以CRLF结束 
   3. 请求头和消息实体之间有一个CRLF分隔 4. 根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：

 9. 常见web安全及防护原理 sql 注入原理

就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，终 达到欺骗服务器执行恶意的SQL命令
总的来说有以下几点：
永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长 度，对单引号和双 "-" 进行转换等 永远不要使用动态拼装SQL，可以使用参数化的 SQL 或者直接使用存储过程进行数据查 询存取 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接 不要把机密信息明文存放，请加密或者 hash 掉密码和敏感的信息

XSS原理及防范
Xss(cross-site scripting) 攻击指的是攻击者往 Web 页面里插入恶意 html 标签或者 javascript 代码。
比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃 取 cookie 中的用户私密信息；
或者攻击者在论坛中加一个恶意表单，当用户提交表单的 时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点 XSS防范方法
首先代码里对用户输入的地方和变量都需要仔细检查长度和对 ”<”,”>”,”;”,”’” 等字符做 过滤；
其次任何内容写到页面之前都必须加以encode，避免不小心把 html tag 弄出来。

 这一个层面做好，至少可以堵住超过一半的XSS 攻击 XSS与CSRF有什么区别吗？

XSS 是获取信息，不需要提前知道其他用户页面的代码和数据包。 CSRF 是代替用户完成 指定的动作，
需要知道其他用户页面的代码和数据包。要完成一次 CSRF 攻击，受害者必 须依次完成两个步骤
登录受信任网站 A ，并在本地生成 Cookie
在不登出 A 的情况下，访问危险网站 B CSRF的防御
服务端的 CSRF 方式方法很多样，但总的思想都是一致的，
就是在客户端页面增加伪随机 数 通过验证码的方法（总之看的我眼花，都成年人了近视度数还在上涨）