输出什么？

function sayHi() {
console.log(name)
console.log(age)
var name = 'Lydia'（考察var 的基本知识）
let age = 21  
}
sayHi()

输出 undefined 和  ReferenceError


在函数内部，我们首先通过 var 关键字声明了 name 变量。这意味着变量被提升了（内存
空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是
undefined 。因为当我们打印 name 变量时还没有执行到定义变量的位置，因此变量的值保
持为 undefined 。
通过 let 和 const 关键字声明的变量也会提升，但是和 var 不同，它们不会被初始化。
在我们声明（初始化）之前是不能访问它们的。这个行为被称之为暂时性死区。当我们试图
在声明之前访问它们时，JavaScript 将会抛出一个 ReferenceError 错误。

输出什么？

for (var i = 0; i < 3; i++) {
setTimeout(() => console.log(i), 1)
}
for (let i = 0; i < 3; i++) {
setTimeout(() => console.log(i), 1)
}

输出3，3，3和0 1 2

由于 JavaScript 的事件循环， setTimeout 回调会在遍历结束后才执行。因为在第一个遍历
中遍历 i 是通过 var 关键字声明的，所以这个值是全局作用域下的。在遍历过程中，我
们通过一元操作符 ++ 来每次递增 i 的值。当 setTimeout 回调执行的时候， i 的值等
于 3。
在第二个遍历中，遍历 i 是通过 let 关键字声明的：通过 let 和 const 关键字声明的
变量是拥有块级作用域（指的是任何在 {} 中的内容）。在每次的遍历过程中， i 都有一个
新值，并且每个值都在循环内的作用域中。


输出什么？

const shape = {
radius: 10,
diameter() {
return this.radius * 2
},
perimeter: () => 2 * Math.PI * this.radius
}
shape.diameter()
shape.perimeter()

20 和 NAN

注意 diameter 的值是一个常规函数，但是 perimeter 的值是一个箭头函数。
对于箭头函数， this 关键字指向的是它当前周围作用域（简单来说是包含箭头函数的常规
函数，如果没有常规函数的话就是全局对象），这个行为和常规函数不同。这意味着当我们
调用 perimeter 时， this 不是指向 shape 对象，而是它的周围作用域（在例子中是
window ）。
在 window 中没有 radius 这个属性，因此返回 undefined 。

输出什么？

+true;
!"Lydia";

一元操作符加号尝试将 bool 转为 number。 true 转换为 number 的话为 1 ， false 为
0 。
字符串 'Lydia' 是一个真值，真值取反那么就返回 false 。

