JavaScript进阶
1 内置类型
JS 中分为七种内置类型，七种内置类型又分为两大类型：基本类型和对象
（ Object ）。
基本类型有六种： null ， undefined ， boolea n， number ， string ， symbol 。
其中 JS 的数字类型是浮点类型的，没有整型。并且浮点类型基于 IEEE 754 标准实
现，在使用中会遇到某些 Bug。 NaN 也属于 number 类型，并且 NaN 不等于自身。
对于基本类型来说，如果使用字面量的方式，那么这个变量只是个字面量，只有在必要的
时候才会转换为对应的类型。

let a = 111 // 这只是字面量，不是 number 类型
a.toString() // 使用时候才会转换为对象类型

对象（ Object ）是引用类型，在使用过程中会遇到浅拷贝和深拷贝的问题

let a = { name: 'FE' }
let b = a
b.name = 'EF'
console.log(a.name)

2 Typeof
typeof 对于基本类型，除了 null 都可以显示正确的类型

typeof 1 // 'number'
typeof '1' // 'string'
typeof undefined // 'undefined'
typeof true // 'boolean'
typeof Symbol() // 'symbol'
typeof b // b 没有声明，但是还会显示 undefined

typeof 对于对象，除了函数都会显示 object
typeof [] // 'object'
typeof {} // 'object'
typeof console.log // 'function'
对于 null 来说，虽然它是基本类型，但是会显示 object ，这是一个存在
很久了的 Bug

typeof null // 'object'
PS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位
系统，为了性能考虑使用低位存储了变量的类型信息， 000 开头代表是对
象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的
内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。

如果我们想获得一个变量的正确类型，可以通过
Object.prototype.toString.call(xx) 。这样我们就可以获得类似 [object Type] 的字
符串
let a
// 我们也可以这样判断 undefined
a === undefined
// 但是 undefined 不是保留字，能够在低版本浏览器被赋值
let undefined = 1
// 这样判断就会出错
// 所以可以用下面的方式来判断，并且代码量更少
// 因为 void 后面随便跟上一个组成表达式
// 返回就是 undefined
a === void 0

原型
每个函数都有 prototype 属性，除了 Function.prototype.bind() ，该属性指向原型。
每个对象都有 __proto__ 属性，指向了创建该对象的构造函数的原型。其实这个属性指向
了 [[prototype]] ，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用
_proto_ 来访问。
对象可以通过 __proto__ 来寻找不属于该对象的属性， __proto__ 将对象连接起来组成
了原型链

 new
新生成了一个对象
链接到原型
绑定 this
返回新对象
在调用 new 的过程中会发生以上四件事情，我们也可以试着来自己实现一个
new

function create() {
 // 创建一个空的对象
 let obj = new Object()
 // 获得构造函数
 let Con = [].shift.call(arguments)
 // 链接到原型
 obj.__proto__ = Con.prototype
 // 绑定 this，执行构造函数
 let result = Con.apply(obj, arguments)
 // 确保 new 出来的是个对象
 return typeof result === 'object' ? result : obj
}


instanceof 可以正确的判断对象的类型，因为内部机制是通过判断对象的原
型链中是不是能找到类型的 prototype
我们也可以试着实现一下 instanceof

function instanceof(left, right) {
 // 获得类型的原型
 let prototype = right.prototype
 // 获得对象的原型
 left = left.__proto__
// 判断对象的类型是否等于类型的原型
 while (true) {
 if (left === null)
 return false
 if (prototype === left)
 return true
 left = left.__proto__
 }
}

this
function foo() {
console.log(this.a)
}
var a = 1
foo()
var obj = {
a: 2,
foo: foo
}
obj.foo()
// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况
// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向
var c = new foo()
c.a = 3
console.log(c.a)
// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new
注意this的指向
function a() {
 return () => {
 return () => {
 console.log(this)
 }
 }
}
console.log(a()()())
箭头函数其实是没有 this 的，这个函数中的 this 只取决于他外面的第一
个不是箭头函数的函数的 this 。在这个例子中，因为调用 a 符合前面代
码中的第一个情况，所以 this 是 window 。并且 this 一旦绑定了上下文，
就不会被任何代码改变

